/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package unidadtres;

import funcion.matriz;
import java.awt.Color;
import java.text.DecimalFormat;
import javax.swing.JOptionPane;

/**
 *
 * @author Jorge Alvarado #
 */
public class gaussJordanParticionado extends javax.swing.JFrame {

    /**
     * Creates new form gaussJordanParticionado
     */
    public gaussJordanParticionado() {
        initComponents();
        this.setLocationRelativeTo(null);

    }

    int xMouse, yMouse;
    Color sombra = new Color(0, 134, 170);
    Color original = new Color(0, 134, 190);

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupoBotones = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        panelAzul = new javax.swing.JPanel();
        panelDorado = new javax.swing.JPanel();
        textFieldDimension = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        panelValores = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        textAreaResultados = new javax.swing.JTextArea();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        panelSalir = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        panelRetroceder = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setUndecorated(true);
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));
        jPanel1.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        panelAzul.setBackground(new java.awt.Color(0, 61, 121));

        javax.swing.GroupLayout panelAzulLayout = new javax.swing.GroupLayout(panelAzul);
        panelAzul.setLayout(panelAzulLayout);
        panelAzulLayout.setHorizontalGroup(
            panelAzulLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );
        panelAzulLayout.setVerticalGroup(
            panelAzulLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 900, Short.MAX_VALUE)
        );

        jPanel1.add(panelAzul, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 20, 900));

        panelDorado.setBackground(new java.awt.Color(213, 159, 15));

        javax.swing.GroupLayout panelDoradoLayout = new javax.swing.GroupLayout(panelDorado);
        panelDorado.setLayout(panelDoradoLayout);
        panelDoradoLayout.setHorizontalGroup(
            panelDoradoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 20, Short.MAX_VALUE)
        );
        panelDoradoLayout.setVerticalGroup(
            panelDoradoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 900, Short.MAX_VALUE)
        );

        jPanel1.add(panelDorado, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 20, 900));

        textFieldDimension.setFont(new java.awt.Font("Roboto Medium", 0, 24)); // NOI18N
        textFieldDimension.setHorizontalAlignment(javax.swing.JTextField.CENTER);
        textFieldDimension.setText("4");
        textFieldDimension.setBorder(null);
        jPanel1.add(textFieldDimension, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 70, 100, 40));
        jPanel1.add(jSeparator1, new org.netbeans.lib.awtextra.AbsoluteConstraints(210, 110, 100, 10));

        panelValores.setBackground(new java.awt.Color(0, 134, 190));

        jLabel1.setFont(new java.awt.Font("Roboto Medium", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Ingresar valores");
        jLabel1.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel1.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel1MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel1MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel1MouseExited(evt);
            }
        });

        javax.swing.GroupLayout panelValoresLayout = new javax.swing.GroupLayout(panelValores);
        panelValores.setLayout(panelValoresLayout);
        panelValoresLayout.setHorizontalGroup(
            panelValoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 200, Short.MAX_VALUE)
        );
        panelValoresLayout.setVerticalGroup(
            panelValoresLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 50, Short.MAX_VALUE)
        );

        jPanel1.add(panelValores, new org.netbeans.lib.awtextra.AbsoluteConstraints(350, 70, 200, 50));

        textAreaResultados.setColumns(20);
        textAreaResultados.setFont(new java.awt.Font("Roboto Medium", 0, 20)); // NOI18N
        textAreaResultados.setRows(5);
        jScrollPane1.setViewportView(textAreaResultados);

        jPanel1.add(jScrollPane1, new org.netbeans.lib.awtextra.AbsoluteConstraints(70, 140, 800, 730));

        jPanel2.setBackground(new java.awt.Color(255, 255, 255));
        jPanel2.addMouseMotionListener(new java.awt.event.MouseMotionAdapter() {
            public void mouseDragged(java.awt.event.MouseEvent evt) {
                jPanel2MouseDragged(evt);
            }
        });
        jPanel2.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mousePressed(java.awt.event.MouseEvent evt) {
                jPanel2MousePressed(evt);
            }
        });
        jPanel2.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setFont(new java.awt.Font("Roboto Medium", 0, 24)); // NOI18N
        jLabel2.setText("Gauss-Jordan particionado");
        jPanel2.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(270, 10, -1, -1));

        jPanel1.add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(40, 0, 780, 40));

        panelSalir.setBackground(new java.awt.Color(255, 255, 255));

        jLabel6.setFont(new java.awt.Font("Roboto Medium", 0, 24)); // NOI18N
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("x");
        jLabel6.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel6.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel6MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel6MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel6MouseExited(evt);
            }
        });

        javax.swing.GroupLayout panelSalirLayout = new javax.swing.GroupLayout(panelSalir);
        panelSalir.setLayout(panelSalirLayout);
        panelSalirLayout.setHorizontalGroup(
            panelSalirLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
        );
        panelSalirLayout.setVerticalGroup(
            panelSalirLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
        );

        jPanel1.add(panelSalir, new org.netbeans.lib.awtextra.AbsoluteConstraints(860, 0, 40, 40));

        panelRetroceder.setBackground(new java.awt.Color(255, 255, 255));

        jLabel7.setFont(new java.awt.Font("Roboto Medium", 0, 24)); // NOI18N
        jLabel7.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel7.setText("<");
        jLabel7.setCursor(new java.awt.Cursor(java.awt.Cursor.HAND_CURSOR));
        jLabel7.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jLabel7MouseClicked(evt);
            }
            public void mouseEntered(java.awt.event.MouseEvent evt) {
                jLabel7MouseEntered(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                jLabel7MouseExited(evt);
            }
        });

        javax.swing.GroupLayout panelRetrocederLayout = new javax.swing.GroupLayout(panelRetroceder);
        panelRetroceder.setLayout(panelRetrocederLayout);
        panelRetrocederLayout.setHorizontalGroup(
            panelRetrocederLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel7, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
        );
        panelRetrocederLayout.setVerticalGroup(
            panelRetrocederLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, 40, Short.MAX_VALUE)
        );

        jPanel1.add(panelRetroceder, new org.netbeans.lib.awtextra.AbsoluteConstraints(820, 0, 40, 40));

        jLabel3.setFont(new java.awt.Font("Roboto", 0, 20)); // NOI18N
        jLabel3.setText("Dimensión:");
        jPanel1.add(jLabel3, new org.netbeans.lib.awtextra.AbsoluteConstraints(100, 80, -1, -1));

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jLabel1MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseEntered
        panelValores.setBackground(sombra);
    }//GEN-LAST:event_jLabel1MouseEntered

    private void jLabel1MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseExited
        panelValores.setBackground(original);
    }//GEN-LAST:event_jLabel1MouseExited

    private void jPanel2MouseDragged(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MouseDragged
        int x = evt.getXOnScreen();
        int y = evt.getYOnScreen();
        this.setLocation(x - xMouse, y - yMouse);
    }//GEN-LAST:event_jPanel2MouseDragged

    private void jPanel2MousePressed(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jPanel2MousePressed
        xMouse = evt.getX();
        yMouse = evt.getY();
    }//GEN-LAST:event_jPanel2MousePressed

    private void jLabel6MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseClicked
        System.exit(0);
    }//GEN-LAST:event_jLabel6MouseClicked

    private void jLabel6MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseEntered
        panelSalir.setBackground(Color.gray);
    }//GEN-LAST:event_jLabel6MouseEntered

    private void jLabel6MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel6MouseExited
        panelSalir.setBackground(Color.WHITE);
    }//GEN-LAST:event_jLabel6MouseExited

    private void jLabel7MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel7MouseClicked
        this.setVisible(false);
        metodosExactos abrir = new metodosExactos();
        abrir.setVisible(true);
    }//GEN-LAST:event_jLabel7MouseClicked

    private void jLabel7MouseEntered(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel7MouseEntered
        panelRetroceder.setBackground(Color.gray);
    }//GEN-LAST:event_jLabel7MouseEntered

    private void jLabel7MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel7MouseExited
        panelRetroceder.setBackground(Color.white);
    }//GEN-LAST:event_jLabel7MouseExited

    private void jLabel1MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jLabel1MouseClicked

        matriz objetoMatriz = new matriz();

        int dimension = Integer.parseInt(textFieldDimension.getText());
        
        double[][] matrizA = new double[dimension][dimension];

        textAreaResultados.append("========= Nueva operación =========\n");

        if (dimension < 4) {
            textAreaResultados.append("La dimension de la matriz no pueder ser menor a 4\n");
        } else {
            matrizA = objetoMatriz.llenaMatriz(dimension);
            muestraMatriz(matrizA, dimension, dimension);
            dosParticiones(matrizA, dimension);
        }

    }//GEN-LAST:event_jLabel1MouseClicked

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(gaussJordanParticionado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(gaussJordanParticionado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(gaussJordanParticionado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(gaussJordanParticionado.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new gaussJordanParticionado().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.ButtonGroup grupoBotones;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JPanel panelAzul;
    private javax.swing.JPanel panelDorado;
    private javax.swing.JPanel panelRetroceder;
    private javax.swing.JPanel panelSalir;
    private javax.swing.JPanel panelValores;
    private javax.swing.JTextArea textAreaResultados;
    private javax.swing.JTextField textFieldDimension;
    // End of variables declaration//GEN-END:variables

    public void muestraMatriz(double[][] matriz, int renglon, int columna) {
        String auxiliar = "";
        for (int i = 0; i < renglon; i++) {
            auxiliar = " ";
            for (int j = 0; j < columna; j++) {
                auxiliar += "[ " + matriz[i][j] + " ] ";
            }
            textAreaResultados.append(auxiliar + " \n");
        }
        textAreaResultados.append("\n");
    }

    public void muestraVector(double[] vector, int dimension) {
        String auxiliar = "";
        for (int i = 0; i < dimension; i++) {
            auxiliar += "| ";
            auxiliar += vector[i];
            auxiliar += " |\n";
        }
        textAreaResultados.append(auxiliar + "\n");
    }

    public void dosParticiones(double[][] matrizA, int dimension) {
        double[] vectorB = new double[dimension];

        matriz objetoMatriz = new matriz();
        
        vectorB = objetoMatriz.llenaVector(dimension);
        textAreaResultados.append("El vector solucion es: \n");
        muestraVector(vectorB, dimension);
//        objetoMatriz.setVectorB(vectorB);

        if (objetoMatriz.determinanteMatriz(matrizA, dimension) == 0) {
            textAreaResultados.append("El determinante de la matriz es 0 por lo tanto no se puede seguir con el procedimiento");
        } else {
            textAreaResultados.append("El determinante de la matriz A es: " + objetoMatriz.determinanteMatriz(matrizA, dimension) + "\n");
            double[][] A11 = new double[2][2];
            double[][] A12 = new double[2][dimension - 2];
            double[][] A21 = new double[dimension - 2][2];
            double[][] A22 = new double[dimension - 2][dimension - 2];

            double[][] b1 = new double[2][0];
            double[][] b2 = new double[dimension - 2][0];

            b1 = objetoMatriz.particionVector(vectorB,dimension,1);
            b2 = objetoMatriz.particionVector(vectorB,dimension,2);

            textAreaResultados.append("Vector B1: \n");
            muestraMatriz(b1, b1.length, b1[0].length);
            textAreaResultados.append("Vector B2: \n");
            muestraMatriz(b2, b2.length, b2[0].length);

            A11 = objetoMatriz.particionMatriz(matrizA,dimension,11);
            textAreaResultados.append("Matriz A11: \n");
            muestraMatriz(A11, A11.length, A11[0].length);

            A12 = objetoMatriz.particionMatriz(matrizA,dimension,12);
            textAreaResultados.append("Matriz A12: \n");
            muestraMatriz(A12, A12.length, A12[0].length);

            A21 = objetoMatriz.particionMatriz(matrizA,dimension,21);
            textAreaResultados.append("Matriz A21: \n");
            muestraMatriz(A21, A21.length, A21[0].length);

            A22 = objetoMatriz.particionMatriz(matrizA,dimension,22);
            textAreaResultados.append("Matriz A22: \n");
            muestraMatriz(A22, A22.length, A22[0].length);

            //Obtener la identidad que estara en A'11 **//** A'11 = invA11 * A11 = I
            textAreaResultados.append("Como A11 es el elemento pivote, multipliquemos los elementos"
                    + "del primer renglon por la inversa de A11.\n");

            textAreaResultados.append("La matriz inversa de A11 es: \n");
            double[][] matrizInversaA11 = new double[A11.length][A11[0].length];
            matrizInversaA11 = objetoMatriz.matrizInversa(A11, A11.length);
            muestraMatriz(matrizInversaA11, matrizInversaA11.length, matrizInversaA11[0].length);

            textAreaResultados.append("La matriz A'11 = A11 * inversaA11 es: \n");
            double[][] matrizA11Transformada = new double[A11.length][A11[0].length];
            matrizA11Transformada = objetoMatriz.multiplicacionMatrices(matrizInversaA11, A11);
            muestraMatriz(matrizA11Transformada, matrizA11Transformada.length, matrizA11Transformada[0].length);

            textAreaResultados.append("La matriz A'12 = A12 * inversaA11 es: \n");
            double[][] matrizA12Transformada = new double[A12.length][A12[0].length];
            matrizA12Transformada = objetoMatriz.multiplicacionMatrices(matrizInversaA11, A12);
            muestraMatriz(matrizA12Transformada, matrizA12Transformada.length, matrizA12Transformada[0].length);

            textAreaResultados.append("La matriz b'1 = b1 *inversaA11 es: \n");
            double[][] matrizb1Transformada = new double[b1.length][b1[0].length];
            matrizb1Transformada = objetoMatriz.multiplicacionMatrices(matrizInversaA11, b1);
            muestraMatriz(matrizb1Transformada, matrizb1Transformada.length, matrizb1Transformada[0].length);

            textAreaResultados.append("Lo siguiente es hacer 0 la matriz A21 y hacer A'22, b'1: \n");

            textAreaResultados.append("La matriz A'21 = A21 - A21 * I: \n");
            double[][] matrizA21Transformada = new double[A21.length][A21[0].length];
            matrizA21Transformada = objetoMatriz.restaMatriz(A21, A21);
            muestraMatriz(matrizA21Transformada, matrizA21Transformada.length, matrizA21Transformada[0].length);

            textAreaResultados.append("La matriz A'22 = A22 - A21 * A'12 \n");
            textAreaResultados.append("A21 * A'12 = \n");
            double[][] multiplicacionA21A12Tranformada = new double[A21.length][matrizA12Transformada[0].length];
            multiplicacionA21A12Tranformada = objetoMatriz.multiplicacionMatrices(A21, matrizA12Transformada);
            muestraMatriz(multiplicacionA21A12Tranformada, multiplicacionA21A12Tranformada.length, multiplicacionA21A12Tranformada[0].length);

            textAreaResultados.append("A'22 = \n");
            double[][] matrizA22Transformada = new double[A22.length][A22[0].length];
            matrizA22Transformada = objetoMatriz.restaMatriz(A22, multiplicacionA21A12Tranformada);
            muestraMatriz(matrizA22Transformada, matrizA22Transformada.length, matrizA22Transformada[0].length);

            textAreaResultados.append("La matriz b'2 = b2 - A21 * b'1: \n");
            textAreaResultados.append("A21 * b'1 = \n");
            double[][] multiplicacionA21b1Tranformada = new double[A21.length][matrizb1Transformada[0].length];
            multiplicacionA21b1Tranformada = objetoMatriz.multiplicacionMatrices(A21, matrizb1Transformada);
            muestraMatriz(multiplicacionA21b1Tranformada, multiplicacionA21b1Tranformada.length, multiplicacionA21b1Tranformada[0].length);

            textAreaResultados.append("b'2 = \n");
            double[][] matrizb2Transformada = new double[b2.length][b2[0].length];
            matrizb2Transformada = objetoMatriz.restaMatriz(b2, multiplicacionA21b1Tranformada);
            muestraMatriz(matrizb2Transformada, matrizb2Transformada.length, matrizb2Transformada[0].length);

            textAreaResultados.append("*** Primera iteración *** \n");
            double[][] primeraIteracion = new double[dimension][dimension];
            primeraIteracion = objetoMatriz.armarMatriz(matrizA11Transformada, matrizA12Transformada, matrizA21Transformada, matrizA22Transformada, dimension);
            muestraMatriz(primeraIteracion, primeraIteracion.length, primeraIteracion[0].length);

            double[][] primeraIteracionVector = new double[matrizb1Transformada.length + matrizb2Transformada.length][matrizb2Transformada[0].length];
            primeraIteracionVector = objetoMatriz.armarVector(matrizb1Transformada, matrizb2Transformada, dimension);
            muestraMatriz(primeraIteracionVector, primeraIteracionVector.length, primeraIteracionVector[0].length);
            textAreaResultados.append("***Fin de la primera iteración***\n\n");

            textAreaResultados.append("Ahora multiplicaremos el segundo renglon por la inversa de A'22");

            textAreaResultados.append("Matriz inversa de A'22: \n");
            double[][] inversaA22Transformada = new double[matrizA22Transformada.length][matrizA22Transformada[0].length];
            inversaA22Transformada = objetoMatriz.matrizInversa(matrizA22Transformada, matrizA22Transformada.length);
            muestraMatriz(inversaA22Transformada, inversaA22Transformada.length, inversaA22Transformada[0].length);

            textAreaResultados.append("A''22 = inversaA'22 * A'22 = \n");
            double[][] dobleA22Transformada = new double[inversaA22Transformada.length][matrizA22Transformada[0].length];
            dobleA22Transformada = objetoMatriz.multiplicacionMatrices(inversaA22Transformada, matrizA22Transformada);
            muestraMatriz(dobleA22Transformada, dobleA22Transformada.length, dobleA22Transformada[0].length);

            textAreaResultados.append("b''2  = inversaA'22 * b'2: \n");
            double[][] dobleb2Transformada = new double[inversaA22Transformada.length][matrizb2Transformada[0].length];
            dobleb2Transformada = objetoMatriz.multiplicacionMatrices(inversaA22Transformada, matrizb2Transformada);
            muestraMatriz(dobleb2Transformada, dobleb2Transformada.length, dobleb2Transformada[0].length);

            textAreaResultados.append("Tambien debemos hacer 0 arriba de la matriz pivote: \n");
            double[][] dobleA12Transformada = new double[matrizA12Transformada.length][matrizA12Transformada[0].length];
            dobleA12Transformada = objetoMatriz.restaMatriz(matrizA12Transformada, matrizA12Transformada);
            muestraMatriz(dobleA12Transformada, dobleA12Transformada.length, dobleA12Transformada[0].length);

            textAreaResultados.append("Ahora operamos para obtener b''1 = b'1 - A'12 * b''2: \n");
            double[][] A12TransformadaDobleb2Transformada = new double[matrizA12Transformada.length][dobleb2Transformada[0].length];
            A12TransformadaDobleb2Transformada = objetoMatriz.multiplicacionMatrices(matrizA12Transformada, dobleb2Transformada);
            muestraMatriz(A12TransformadaDobleb2Transformada, A12TransformadaDobleb2Transformada.length, A12TransformadaDobleb2Transformada[0].length);
            textAreaResultados.append("b''1= \n");
            double[][] dobleb1Transformada = new double[matrizb1Transformada.length][A12TransformadaDobleb2Transformada[0].length];
            dobleb1Transformada = objetoMatriz.restaMatriz(matrizb1Transformada, A12TransformadaDobleb2Transformada);
            muestraMatriz(dobleb1Transformada, dobleb1Transformada.length, dobleb1Transformada[0].length);

            textAreaResultados.append("*** Segunda iteración ***\n");
            double[][] segundaIteración = new double[dimension][dimension];
            segundaIteración = objetoMatriz.armarMatriz(matrizA11Transformada, dobleA12Transformada, matrizA21Transformada, dobleA22Transformada, dimension);
            muestraMatriz(segundaIteración, segundaIteración.length, segundaIteración[0].length);

            double[][] segundaIteracionVector = new double[dobleb1Transformada.length + dobleb2Transformada.length][dobleb1Transformada[0].length];
            segundaIteracionVector = objetoMatriz.armarVector(dobleb1Transformada, dobleb2Transformada, dimension);
            muestraMatriz(segundaIteracionVector, segundaIteracionVector.length, segundaIteracionVector[0].length);
        }
    }
}
